plugins {
    id 'java'
    id 'java-library'
//    id 'maven'
    id 'signing'
    id 'maven-publish'
}

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'

    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    // https://mvnrepository.com/artifact/org.jsonschema2pojo/jsonschema2pojo-core
    implementation 'org.jsonschema2pojo:jsonschema2pojo-core:1.1.2'

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.3'
}

test {
    useJUnitPlatform()
}

jar.enabled = true

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

def pomConfig = {
    licenses {
        license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }

    developers {
        developer {
            id 'distep2'
            name 'Dmitry Stepanov'
            email 'distep2@gmail.com'
        }
    }

    scm {
        url 'https://github.com/stepanovD/springwolfdoc2dto'
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            artifact sourcesJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }

            groupId = projectGroup
            artifactId = 'springwolfdoc2dto-core'
            version = projectVersion

            pom {
                name = 'springwolfdoc2dto-core'
                description = 'A library for generate dto classes by SpringWolf documentations'
            }

            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'A library for generate dto classes by SpringWolf documentations')
                root.appendNode('name', 'springwolfdoc2dto-core')
                root.appendNode('url', 'https://github.com/stepanovD/springwolfdoc2dto')
                root.children().last() + pomConfig

                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }

    repositories {
        maven {
            url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = project.findProperty('ossrhUsername') ?: ''
                password = project.findProperty('ossrhPassword') ?: ''
            }
        }
    }

    model {
        tasks.publishMavenJavaPublicationToMavenLocal {
            dependsOn project.tasks.signArchives
        }
        tasks.publishMavenJavaPublicationToMavenRepository {
            dependsOn project.tasks.signArchives
        }
    }
}
